{"ast":null,"code":"import * as XLSX from 'xlsx';\nexport const excelService = {\n  async importExcel(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          var _e$target;\n          const data = new Uint8Array((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result);\n          const workbook = XLSX.read(data, {\n            type: 'array'\n          });\n          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n          // Converteer Excel data naar JSON\n          const jsonData = XLSX.utils.sheet_to_json(firstSheet, {\n            header: 1\n          });\n\n          // Log de eerste paar rijen om de structuur te zien\n          console.log('Excel data structuur:', jsonData.slice(0, 5));\n\n          // Verwerk de data\n          const tasks = [];\n          const timeEntries = [];\n\n          // Eerste rij bevat de taken\n          const taskRow = jsonData[0];\n          taskRow.forEach((taskName, index) => {\n            if (taskName && index > 0) {\n              // Skip de eerste kolom (datums)\n              tasks.push({\n                id: `task-${index}`,\n                name: taskName\n              });\n            }\n          });\n\n          // Verwerk de uren per dag\n          for (let i = 1; i < jsonData.length; i++) {\n            const row = jsonData[i];\n            const date = row[0];\n            if (date) {\n              row.forEach((hours, index) => {\n                if (index > 0 && hours) {\n                  timeEntries.push({\n                    id: `entry-${i}-${index}`,\n                    taskId: `task-${index}`,\n                    date: date.toString(),\n                    hours: hours\n                  });\n                }\n              });\n            }\n          }\n\n          // Log de verwerkte data\n          console.log('Verwerkte taken:', tasks);\n          console.log('Verwerkte uren:', timeEntries.slice(0, 5));\n          resolve({\n            tasks,\n            timeEntries\n          });\n        } catch (error) {\n          console.error('Error bij het verwerken van Excel:', error);\n          reject(error);\n        }\n      };\n      reader.onerror = error => reject(error);\n      reader.readAsArrayBuffer(file);\n    });\n  },\n  async exportToExcel(data) {\n    const workbook = XLSX.utils.book_new();\n\n    // Maak een 2D array voor de data\n    const rows = [];\n\n    // Header rij met taken\n    const headerRow = ['Datum', ...data.tasks.map(task => task.name)];\n    rows.push(headerRow);\n\n    // Groepeer entries per datum\n    const entriesByDate = data.timeEntries.reduce((acc, entry) => {\n      if (!acc[entry.date]) {\n        acc[entry.date] = {};\n      }\n      acc[entry.date][entry.taskId] = entry.hours;\n      return acc;\n    }, {});\n\n    // Voeg rijen toe voor elke datum\n    Object.entries(entriesByDate).forEach(([date, taskHours]) => {\n      const row = [date];\n      data.tasks.forEach(task => {\n        row.push(taskHours[task.id] || 0);\n      });\n      rows.push(row);\n    });\n\n    // Maak worksheet\n    const worksheet = XLSX.utils.aoa_to_sheet(rows);\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Urenregistratie');\n\n    // Converteer naar blob\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    return new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n  }\n};","map":{"version":3,"names":["XLSX","excelService","importExcel","file","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","data","Uint8Array","target","result","workbook","read","type","firstSheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","header","console","log","slice","tasks","timeEntries","taskRow","forEach","taskName","index","push","id","name","i","length","row","date","hours","taskId","toString","error","onerror","readAsArrayBuffer","exportToExcel","book_new","rows","headerRow","map","task","entriesByDate","reduce","acc","entry","Object","entries","taskHours","worksheet","aoa_to_sheet","book_append_sheet","excelBuffer","write","bookType","Blob"],"sources":["/Users/robert.doggers/Desktop/Urenregistratie/src/services/excelService.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { ExcelImportData, Task, TimeEntry } from '../types';\n\nexport const excelService = {\n  async importExcel(file: File): Promise<ExcelImportData> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (e) => {\n        try {\n          const data = new Uint8Array(e.target?.result as ArrayBuffer);\n          const workbook = XLSX.read(data, { type: 'array' });\n          const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n          \n          // Converteer Excel data naar JSON\n          const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });\n          \n          // Log de eerste paar rijen om de structuur te zien\n          console.log('Excel data structuur:', jsonData.slice(0, 5));\n          \n          // Verwerk de data\n          const tasks: Task[] = [];\n          const timeEntries: TimeEntry[] = [];\n          \n          // Eerste rij bevat de taken\n          const taskRow = jsonData[0];\n          taskRow.forEach((taskName: string, index: number) => {\n            if (taskName && index > 0) { // Skip de eerste kolom (datums)\n              tasks.push({\n                id: `task-${index}`,\n                name: taskName\n              });\n            }\n          });\n          \n          // Verwerk de uren per dag\n          for (let i = 1; i < jsonData.length; i++) {\n            const row = jsonData[i];\n            const date = row[0];\n            \n            if (date) {\n              row.forEach((hours: number, index: number) => {\n                if (index > 0 && hours) {\n                  timeEntries.push({\n                    id: `entry-${i}-${index}`,\n                    taskId: `task-${index}`,\n                    date: date.toString(),\n                    hours: hours\n                  });\n                }\n              });\n            }\n          }\n          \n          // Log de verwerkte data\n          console.log('Verwerkte taken:', tasks);\n          console.log('Verwerkte uren:', timeEntries.slice(0, 5));\n          \n          resolve({ tasks, timeEntries });\n        } catch (error) {\n          console.error('Error bij het verwerken van Excel:', error);\n          reject(error);\n        }\n      };\n      \n      reader.onerror = (error) => reject(error);\n      reader.readAsArrayBuffer(file);\n    });\n  },\n  \n  async exportToExcel(data: ExcelImportData): Promise<Blob> {\n    const workbook = XLSX.utils.book_new();\n    \n    // Maak een 2D array voor de data\n    const rows: any[][] = [];\n    \n    // Header rij met taken\n    const headerRow = ['Datum', ...data.tasks.map(task => task.name)];\n    rows.push(headerRow);\n    \n    // Groepeer entries per datum\n    const entriesByDate = data.timeEntries.reduce((acc, entry) => {\n      if (!acc[entry.date]) {\n        acc[entry.date] = {};\n      }\n      acc[entry.date][entry.taskId] = entry.hours;\n      return acc;\n    }, {} as Record<string, Record<string, number>>);\n    \n    // Voeg rijen toe voor elke datum\n    Object.entries(entriesByDate).forEach(([date, taskHours]) => {\n      const row = [date];\n      data.tasks.forEach(task => {\n        row.push(taskHours[task.id] || 0);\n      });\n      rows.push(row);\n    });\n    \n    // Maak worksheet\n    const worksheet = XLSX.utils.aoa_to_sheet(rows);\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Urenregistratie');\n    \n    // Converteer naar blob\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    return new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}